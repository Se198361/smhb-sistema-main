generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aviso {
  id         Int       @id @default(autoincrement())
  titulo     String
  conteudo   String?
  descricao  String?
  inicio     DateTime?
  fim        DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Membro {
  id          Int       @id @default(autoincrement())
  nome        String
  endereco    String
  telefone    String
  aniversario DateTime?
  foto        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Evento {
  id        Int       @id @default(autoincrement())
  titulo    String
  data      DateTime
  horario   String?
  local     String
  comparecido Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Diretoria {
  id        Int       @id @default(autoincrement())
  nome      String
  cargo     String
  foto      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Financa {
  id        Int       @id @default(autoincrement())
  tipo      String
  valor     Float
  data      DateTime
  pagante   String
  uso       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Conteudo {
  id        Int       @id @default(autoincrement())
  tipo      String
  titulo    String
  data      DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Usuario {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  senhaHash String
  nome      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cracha {
  id        Int      @id @default(autoincrement())
  nome      String
  front     String
  back      String?
  origem    String   @default("CRACHAS")
  embaixadorId Int?
  embaixador   Embaixador? @relation(fields: [embaixadorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Embaixador {
  id        Int      @id @default(autoincrement())
  nome      String
  idade     Int?
  telefone  String?
  foto      String?
  pai       String?
  mae       String?
  crachas   Cracha[]
  templateFrontId Int?
  templateFront   BadgeTemplate? @relation("EmbaixadorTemplateFront", fields: [templateFrontId], references: [id])
  templateBackId  Int?
  templateBack    BadgeTemplate? @relation("EmbaixadorTemplateBack", fields: [templateBackId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BadgeTemplate {
  id        Int      @id @default(autoincrement())
  page      String
  lado      String   // 'front' | 'back'
  name      String?
  img       String
  embaixadoresFront Embaixador[] @relation("EmbaixadorTemplateFront")
  embaixadoresBack  Embaixador[] @relation("EmbaixadorTemplateBack")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}